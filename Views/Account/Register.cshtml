@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <title>Register</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <style>
        body {
            background: url('https://source.unsplash.com/1600x900/?technology') no-repeat center center fixed;
            background-size: cover;
            font-family: Arial, sans-serif;
        }

        .register-container {
            width: 400px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 20px;
            margin: 100px auto;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
        }

        .form-control {
            background: transparent;
            color: white;
            border: 1px solid #27A4F2;
        }

        .btn-register {
            background-color: #27A4F2;
            color: white;
            width: 100%;
        }

        .error-message {
            color: red;
            font-size: 14px;
            display: none;
        }
    </style>
</head>

<body>
    <div class="register-container">
        <h2 class="text-center">Register</h2>

        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                <ul>
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
            </div>
        }

        <form method="post" action="@Url.Action("Register", "Account")" id="registerForm">
            <div class="mb-3">
                <input type="text" name="CusName" class="form-control" placeholder="Username" required>
            </div>
            <div class="mb-3">
                <input type="email" name="CusEmail" class="form-control" placeholder="Email" required>
            </div>
            <div class="mb-3">
                <input type="password" id="password" name="CusPassword" class="form-control" placeholder="Password" required>
            </div>
            <div class="mb-3">
                <input type="password" id="confirmPassword" name="ConfirmPassword" class="form-control" placeholder="Confirm Password" required>
                <small id="passwordError" class="error-message"></small>
            </div>
            <div class="mb-3">
                <input type="text" name="CusPhone" class="form-control" placeholder="Phone (required)">
            </div>
            <div class="mb-3">
                <input type="text" name="CusAddress" class="form-control" placeholder="Address (optional)">
            </div>
            <div class="mb-3">
                <label for="CusDob" class="form-label">Date of Birth</label>
                <input type="date" name="CusDob" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-register">Register</button>
            <div class="login-link text-center mt-2">
                <a href="@Url.Action("Login", "Account")">Back to Login</a>
            </div>
        </form>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let registerForm = document.getElementById("registerForm");
            let passwordField = document.getElementById("password");
            let confirmPasswordField = document.getElementById("confirmPassword");
            let passwordError = document.getElementById("passwordError");
            let phoneField = document.getElementsByName("CusPhone")[0];
            let phoneError = document.createElement("small");

            phoneError.style.color = "red";
            phoneError.style.display = "none";
            phoneField.parentNode.appendChild(phoneError);

            registerForm.addEventListener("submit", function (event) {
                let password = passwordField.value;
                let confirmPassword = confirmPasswordField.value;
                let errorMessage = "";
                let phone = phoneField.value;

                // Kiểm tra mật khẩu yếu
                let weakPasswords = ["123456", "password", "qwerty", "123456789", "abcdef", "123123", "111111", "password1"];
                if (password.length < 6 || weakPasswords.includes(password)) {
                    errorMessage = "Your password is too weak. Please choose a stronger password.";
                } else if (password !== confirmPassword) {
                    errorMessage = "Passwords do not match.";
                }

                if (errorMessage) {
                    event.preventDefault();
                    passwordError.innerText = errorMessage;
                    passwordError.style.display = "block";
                } else {
                    passwordError.style.display = "none";
                }

                // Kiểm tra số điện thoại
                let phonePattern = /^0\d{9}$/;
                if (!phonePattern.test(phone)) {
                    event.preventDefault();
                    phoneError.innerText = "Phone number must be exactly 10 digits and start with 0.";
                    phoneError.style.display = "block";
                } else {
                    phoneError.style.display = "none";
                }
            });
        });
    </script>
</body>
</html>
